from django.http.response import HttpResponse
from django.shortcuts import render
from ..Blog.models import *
# Create your views here.


def introduction(request):
    if request.method=="GET":
        print("{}".format(request.method))
        return render(request, "introduction.html")
    if request.method=="POST":
        return render(request, "form.html")


def form(request):
    if request.method=="GET":
        print("{}".format(request.method))
        return render(request, "form.html")
    if request.method=="POST":
        # model=User.objects.create(fname=request.POST["fname"],lname=request.POST["lname"],v1=request.POST["v1"],v2=request.POST["v2"],v3=request.POST["v3"],v4=request.POST["v4"],v5=request.POST["v5"],v6=request.POST["v6"],v7=request.POST["v7"],v8=request.POST["v8"],v9=request.POST["v9"],v10=request.POST["v10"],v11=request.POST["v11"],v12=request.POST["v12"],g1=request.POST["g1"],g2=request.POST["g2"],g3=request.POST["g3"],g4=request.POST["g4"],g5=request.POST["g5"],g6=request.POST["g6"],g7=request.POST["g7"],g8=request.POST["g8"],g9=request.POST["g9"],g10=request.POST["g10"],l1=request.POST["l1"],l2=request.POST["l2"],l3=request.POST["l3"],l4=request.POST["l4"],l5=request.POST["l5"],l6=request.POST["l6"],l7=request.POST["l7"],l8=request.POST["l8"])
        
        score=0
        v5=request.POST["v5"]
        if v5=='able':
            score+=2
        if request.POST["v1"]=='My':
            score+=1
        if request.POST["v2"]=='expensive':
            score+=1
        if request.POST["v3"]=='noisy':
            score+=1
        if request.POST["v4"]=='wear':
            score+=2
        if request.POST["v6"]=='at':
            score+=2
        if request.POST["v7"]=='getting':
            score+=3
        if request.POST["v8"]=='before':
            score+=3
        if request.POST["v9"]=='managed to':
            score+=3
        if request.POST["v10"]=='wish':
            score+=3
        if request.POST["v11"]=='sort out':
            score+=3
        if request.POST["v12"]=='offered':
            score+=3
        if request.POST["g1"]=='Where':
            score+=1
        if request.POST["g2"]=='Thereâ€™s':
            score+=1
        if request.POST["g3"]=='dark, long':
            score+=1
        if request.POST["g4"]=='speak':
            score+=2
        if request.POST["g5"]=='So':
            score+=2
        if request.POST["g6"]==' to be':
            score+=2
        if request.POST["g7"]=='worse':
            score+=3
        if request.POST["g8"]=='hard':
            score+=3
        if request.POST["g9"]=='easily':
            score+=3
        if request.POST["g10"]=='by':
            score+=3
        if request.POST["l1"]=='False':
            score+=1
        if request.POST["l2"]=='True':
            score+=1
        if request.POST["l3"]=='digest food.':
            score+=2
        if request.POST["l4"]=='eyelashes':
            score+=2
        if request.POST["l5"]=='True':
            score+=3
        if request.POST["l6"]=='False':
            score+=3
        if request.POST["l7"]=='False':
            score+=3
        if request.POST["l8"]=='True':
            score+=3
        model=User.objects.create(score=score,fname=request.POST["fname"],lname=request.POST["lname"],v1=request.POST["v1"],v2=request.POST["v2"],v3=request.POST["v3"],v4=request.POST["v4"],v5=request.POST["v5"],v6=request.POST["v6"],v7=request.POST["v7"],v8=request.POST["v8"],v9=request.POST["v9"],v10=request.POST["v10"],v11=request.POST["v11"],v12=request.POST["v12"],g1=request.POST["g1"],g2=request.POST["g2"],g3=request.POST["g3"],g4=request.POST["g4"],g5=request.POST["g5"],g6=request.POST["g6"],g7=request.POST["g7"],g8=request.POST["g8"],g9=request.POST["g9"],g10=request.POST["g10"],l1=request.POST["l1"],l2=request.POST["l2"],l3=request.POST["l3"],l4=request.POST["l4"],l5=request.POST["l5"],l6=request.POST["l6"],l7=request.POST["l7"],l8=request.POST["l8"])
        
        listscore=[score]
        context={"data":listscore}
        # context={}
        
        context["score"]=score
        context["Firstname"]=request.POST["fname"]
        context["Lastname"]= request.POST["lname"]
        return render(request, "result.html", context= context)



# def modernform(request):
    # if request.method == "GET":
        # return render(request, "modernform.html")

# settings.py
"""
Django settings for Proj project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*882+b$0y-k722#9lqovt703qzto5-99vlzz&**r_$fg_^x7(g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*','127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Blog'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Proj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Proj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
